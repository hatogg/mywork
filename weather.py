import requests
from .. import loader, utils

class WeatherModule(loader.Module):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ"""
    strings = {
        "name": "Weather",
        "no_city": "‚ùó –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞.",
        "fetch_error": "‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    }

    def __init__(self):
        self.config = loader.ModuleConfig("API_KEY", "a02c91969383c2bd1cf56a292977f67b", lambda m: "–í–∞—à API –∫–ª—é—á –æ—Ç OpenWeatherMap")

    def get_weather(self, city):
        url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={self.config['API_KEY']}&units=metric"
        response = requests.get(url)
        if response.status_code == 200:
            data = response.json()
            weather = {
                "city": data["name"],
                "temperature": data["main"]["temp"],
                "description": data["weather"][0]["description"],
                "humidity": data["main"]["humidity"],
                "wind_speed": data["wind"]["speed"]
            }
            return weather
        else:
            return None

    @loader.command()
    async def weathercmd(self, message):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–≥–æ–¥—É –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["no_city"])
            return

        city = args
        weather = self.get_weather(city)

        if weather:
            reply = (
                f"üåÜ –ü–æ–≥–æ–¥–∞ –≤ {weather['city']}:\n"
                f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temperature']}¬∞C\n"
                f"üå§Ô∏è –û–ø–∏—Å–∞–Ω–∏–µ: {weather['description']}\n"
                f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather['humidity']}%\n"
                f"üí® –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather['wind_speed']} –º/—Å"
            )
        else:
            reply = self.strings["fetch_error"]

        await utils.answer(message, reply)